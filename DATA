import json
import random
import string
from datetime import datetime, timedelta

# Function to generate a random date within a range
def random_date(start, end):
    return start + timedelta(days=random.randint(0, int((end - start).days)))

# Function to generate random user data
def generate_user_data(num_users):
    user_data = []
    start_date = datetime.strptime('2000-01-01', '%Y-%m-%d')
    end_date = datetime.strptime('2023-01-01', '%Y-%m-%d')

    for _ in range(num_users):
        user = {
            "id": ''.join(random.choices(string.ascii_lowercase + string.digits, k=8)),
            "name": ''.join(random.choices(string.ascii_letters, k=10)),
            "age": random.randint(18, 70),
            "email": ''.join(random.choices(string.ascii_lowercase, k=5)) + "@example.com",
            "phone": ''.join(random.choices(string.digits, k=10)),
            "address": ''.join(random.choices(string.ascii_letters + string.digits + ' ', k=30)),
            "job_title": ''.join(random.choices(string.ascii_letters + ' ', k=15)),
            "company": ''.join(random.choices(string.ascii_letters, k=10)),
            "interests": [random.choice(["sports", "music", "reading", "traveling", "gaming"]) for _ in range(3)],
            "signup_date": random_date(start_date, end_date).strftime('%Y-%m-%d')
        }
        user_data.append(user)
    return user_data

# Function to process user data
def process_user_data(user_data):
    processed_data = []
    for user in user_data:
        signup_year = int(user["signup_date"].split('-')[0])
        current_year = datetime.now().year
        account_age_years = current_year - signup_year

        user_summary = {
            "id": user["id"],
            "name": user["name"],
            "email": user["email"],
            "phone": user["phone"],
            "job_title": user["job_title"],
            "company": user["company"],
            "interests": user["interests"],
            "account_age_years": account_age_years
        }
        processed_data.append(user_summary)
    return processed_data

# Function to generate statistics from user data
def generate_statistics(user_data):
    total_users = len(user_data)
    avg_age = sum(user['age'] for user in user_data) / total_users
    companies = set(user['company'] for user in user_data)
    interest_counts = {}
    
    for user in user_data:
        for interest in user['interests']:
            if interest not in interest_counts:
                interest_counts[interest] = 0
            interest_counts[interest] += 1
    
    statistics = {
        "total_users": total_users,
        "average_age": avg_age,
        "total_companies": len(companies),
        "interest_counts": interest_counts
    }
    
    return statistics

# Generate a large dataset of users
num_users = 5000
user_data = generate_user_data(num_users)

# Process the user data
processed_data = process_user_data(user_data)

# Generate statistics from the user data
statistics = generate_statistics(user_data)

# Output the original and processed data to JSON files
with open('original_user_data.json', 'w') as original_file:
    json.dump(user_data, original_file, indent=4)

with open('processed_user_data.json', 'w') as processed_file:
    json.dump(processed_data, processed_file, indent=4)

with open('statistics.json', 'w') as stats_file:
    json.dump(statistics, stats_file, indent=4)

print(f"Generated data for {num_users} users.")
print("Original data, processed data, and statistics have been written to 'original_user_data.json', 'processed_user_data.json', and 'statistics.json'.")
