import json

# Sample data simulating a config file with a version number
config_data = {
    "application_name": "ExampleApp",
    "current_version": "2.0.0"
}

# Function to simulate downgrading
def downgrade_version(config):
    print("Original config:", config)
    try:
        # Parse the current version
        major, minor, patch = map(int, config['current_version'].split('.'))
        
        # Logic to downgrade the version (e.g., decrease the minor version)
        if minor > 0:
            minor -= 1
        else:
            if major > 0:
                major -= 1
                minor = 9  # Assuming a minor version reset
            else:
                print("Cannot downgrade version any further.")
                return config
        
        # Update the version in the config
        config['current_version'] = f"{major}.{minor}.{patch}"
        print("Downgraded config:", config)
        return config
    except Exception as e:
        print("Error during downgrade:", e)
        return config

# Simulate reading from a file
config_json = json.dumps(config_data)
config = json.loads(config_json)

# Call the downgrade function
downgraded_config = downgrade_version(config)

# Simulate writing to a file
new_config_json = json.dumps(downgraded_config, indent=4)
print("Updated config JSON:\n", new_config_json)
